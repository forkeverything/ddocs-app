{"version":3,"sources":["account/overview.js","checklist/all.js","checklist/make.js","checklist/single.js"],"names":[],"mappingszfile":"pages.js","sourcesContent":["Vue.component('account-overview', {\n    name: 'AccountOverview',\n    el: function() {\n        return '#account-overview'\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            showCreditCardForm: false,\n            cardError: '',\n            waitingStripeResponse: false,\n            ccName: '',\n            ccNumber: '',\n            ccExpMonth: '',\n            ccExpYear: '',\n            ccCVC: ''\n        };\n    },\n    props: [],\n    computed: {\n        addCardButtonText: function() {\n            if(this.waitingStripeResponse) return 'Processing...';\n            return 'Add Card';\n        },\n        canSubmit: function() {\n            return ! this.waitingStripeResponse && this.ccName && this.ccNumber && this.ccExpMonth && this.ccExpYear && this.ccCVC;\n        }\n    },\n    methods: {\n        toggleCreditCardForm: function() {\n            this.showCreditCardForm = !this.showCreditCardForm;\n        },\n        processCard: function() {\n            var self = this;\n\n            // prevent request pile ups...\n            if(self.waitingStripeResponse) return;\n            self.waitingStripeResponse = true;\n\n            var $form = $(self.$els.stripeForm);\n            self.cardError = '';\n\n            // Make request to stripe\n            Stripe.card.createToken($form, function(status, response) {\n                if(response.error) {\n                    // Card error\n                    self.cardError = response.error;\n                    self.waitingStripeResponse = false;\n                } else {\n                    // Successfully got credit card token\n                    $.ajax({\n                        url: '/account/subscription',\n                        method: 'POST',\n                        data: {\n                            'credit_card_token': response.id\n                        },\n                        success: function(data) {\n                           // success\n                            location.reload();\n                        },\n                        error: function(response) {\n                            console.log(response);\n                        }\n                    });\n                }\n            });\n        },\n        cancelSubscription: function() {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/account/subscription',\n                method: 'DELETE',\n                success: function(data) {\n                   // success\n                    location.reload();\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {\n\n    },\n    ready: function() {\n        Stripe.setPublishableKey($('meta[name=\"stripe-key\"]').attr('content'));\n    }\n});","Vue.component('checklist-all', fetchesFromEloquentRepository.extend({\n    name: 'checklistAll',\n    el: function () {\n        return '#checklist-all'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            hasFilters: false,\n            requestUrl: \"checklist/get\",\n            checklists: []\n        };\n    },\n    props: [],\n    computed: {},\n    methods: {},\n    events: {},\n    ready: function () {\n        var self = this;\n        this.$watch('response', function (response) {\n            self.checklists = $.map(_.omit(response.data, 'query_parameters'), function (checklist, index) {\n                return checklist;\n            });\n        });\n    }\n}));","Vue.component('checklist-make', {\n    name: 'checklistMake',\n    el: function () {\n        return '#checklist-make'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            checklistRecipient: '',\n            checklistName: '',\n            checklistDescription: '',\n            editingName: false,\n            files: [\n                {\n                    name: '',\n                    description: '',\n                    due: '',\n                    required: 1\n                }\n            ]\n        };\n    },\n    props: [],\n    computed: {\n        checklistNameText: function () {\n            // Used to display a default when a name isn't given\n            if (this.checklistName) return this.checklistName;\n            return 'List Name';\n        },\n        validFiles: function () {\n            // Only return files with names\n            return _.filter(this.files, function (file) {\n                return file.name;\n            });\n        },\n        fileCount: function () {\n            return this.validFiles.length;\n        },\n        canSendChecklist: function () {\n            // Required fields...\n            return this.checklistRecipient && this.checklistName && this.fileCount > 0;\n        },\n        makeListButtonText: function () {\n            if (this.ajaxReady) return 'Create List';\n            return 'Saving...';\n        }\n    },\n    methods: {\n        toggleEditingName: function () {\n            this.editingName = !this.editingName;\n            if (this.editingName) {\n                this.$nextTick(function () {\n                    $('#input-checklist-name').focus();\n                });\n            }\n        },\n        addAnotherFileAfter: function (file) {\n            var fileIndex = _.indexOf(this.files, file);\n            var newFile = {\n                name: '',\n                description: '',\n                due: '',\n                required: 1\n            };\n            this.files.splice(fileIndex + 1, 0, newFile);\n            this.$nextTick(function () {\n                $($('.single-file')[fileIndex + 1]).find('.input-file-name').focus();\n            });\n        },\n        removeFile: function (file) {\n            var fileIndex = _.indexOf(this.files, file);\n            if (!file.name && fileIndex !== 0) {\n                this.files.splice(fileIndex, 1);\n                this.$nextTick(function () {\n                    $($('.single-file')[fileIndex - 1]).find('.input-file-name').focus();\n                });\n            }\n        },\n        goTo: function (direction, file) {\n            var fileIndex = _.indexOf(this.files, file);\n            if (direction === 'prev') {\n                $($('.single-file')[fileIndex - 1]).find('.input-file-name').focus();\n            } else {\n                $($('.single-file')[fileIndex + 1]).find('.input-file-name').focus();\n            }\n        },\n        toggleRequired: function (file) {\n            file.required = file.required ? 0 : 1;\n        },\n        sendChecklist: function () {\n            var self = this;\n            vueClearValidationErrors(self);\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/checklist/make',\n                method: 'POST',\n                data: {\n                    recipient: self.checklistRecipient,\n                    name: self.checklistName,\n                    description: self.checklistDescription,\n                    requested_files: self.validFiles\n                },\n                success: function (data) {\n                    location.href = \"/checklist/\" + data;\n                },\n                error: function (response) {\n                    console.log(response);\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {},\n    ready: function () {\n        $(document).on('focus', '.input-file-name', function () {\n            $(this).parent().addClass('is-focused');\n        });\n\n        $(document).on('blur', '.input-file-name', function () {\n            $(this).parent().removeClass('is-focused');\n        });\n    }\n});","Vue.component('checklist-single', fetchesFromEloquentRepository.extend({\n    name: 'checklistSingle',\n    el: function () {\n        return '#checklist-single'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            hasFilters: true,\n            filterOptions: [\n                {\n                    value: 'required',\n                    label: 'Requirement'\n                },\n                {\n                    value: 'version',\n                    label: 'Version'\n                },\n                {\n                    value: 'due',\n                    label: 'Due Date'\n                },\n                {\n                    value: 'status',\n                    label: 'Status'\n                }\n            ],\n            files: [],\n            fileWithExpandedDetails: '',           // Holds a file object\n            expandedView: '',                      // 'history', 'reject'\n            reason: '',\n            numReceived: '',\n            emailToTurnOffNotifications: '',\n            showTurnOffNotificationsPanel: false\n        };\n    },\n    props: ['checklist-hash', 'recipient-notifications'],\n    computed: {\n        requestUrl: function () {\n            return '/checklist/' + this.checklistHash + '/files';\n        },\n        receivedFilesPercentage: function() {\n            if(! this.response.total) return 0;\n            return (100 * this.numReceived / this.response.total).toFixed(2);\n        }\n    },\n    methods: {\n        getUploadDate: function (file) {\n            return moment(file.created_at).format('DDMMYYYY');\n        },\n        uploadFile: function (file, $event) {\n            var fd = new FormData();\n            var uploadedFile = $event.srcElement.files[0];\n\n            fd.append('file', uploadedFile);\n\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/file/' + file.id,\n                method: 'POST',\n                data: fd,\n                contentType: false,\n                processData: false,\n                xhr: function () {\n                    var myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) myXhr.upload.addEventListener('progress', function (e) {\n                        if (e.lengthComputable) {\n                            var max = e.total;\n                            var current = e.loaded;\n                            var progress = Math.round((current * 100) / max);\n                            $('#input-file-' + file.id).siblings('.progress').children('.progress-bar').css(\n                                'width',\n                                progress + '%'\n                            ).attr('aria-valuenow', progress).children('.sr-only').html(progress + '%');\n                        }\n                    }, false);\n                    return myXhr;\n                },\n                success: function (file) {\n                    self.replaceFile(file);\n                    self.numReceived ++;\n\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        replaceFile: function (updatedFileModel) {\n            var self = this;\n            var index = _.indexOf(self.files, _.find(self.files, {id: updatedFileModel.id}));\n            self.files.splice(index, 1, updatedFileModel);\n        },\n        updateProgress: function (e) {\n            if (e.lengthComputable) {\n                var max = e.total;\n                var current = e.loaded;\n                var Percentage = Math.round((current * 100) / max);\n                if (Percentage >= 100) {\n                    // process completed\n                }\n            }\n        },\n        expandFileSection: function (file, section) {\n            this.reason = '';\n            this.fileWithExpandedDetails = file;\n            this.expandedView = section;\n        },\n        fileExpanded: function (file) {\n            return this.fileWithExpandedDetails === file;\n        },\n        hideDetailsSection: function () {\n            this.fileWithExpandedDetails = '';\n        },\n        rejectFile: function (file) {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/file/' + file.id + '/reject',\n                method: 'POST',\n                data: {\n                    \"reason\": self.reason\n                },\n                success: function (file) {\n                    // success\n                    self.reason = '';\n                    self.replaceFile(file);\n                    self.numReceived --;\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        toggleConfirmTurnOffNotifications: function() {\n            this.showTurnOffNotificationsPanel = ! this.showTurnOffNotificationsPanel;\n        },\n        turnOffNotifications: function() {\n\n            var self = this;\n            vueClearValidationErrors(self);\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/checklist/' + self.checklistHash + '/turn_off_notifications',\n                method: 'POST',\n                data: {\n                    \"email\": self.emailToTurnOffNotifications\n                },\n                success: function(data) {\n                   // success\n                   self.recipientNotifications = 0;\n                    self.showTurnOffNotificationsPanel = false;\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    console.log(response);\n                    \n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {},\n    ready: function () {\n\n        var self = this;\n\n        // Use a watcher to parse out the stuff we need to be reactive because Vue can't watch\n        // object properties.\n        this.$watch('response', function (response) {\n            self.files = $.map(_.omit(response.data, 'query_parameters'), function (file, index) {\n\n                // Add custom props for UI\n                // file.expanded = false;\n\n                return file;\n            });\n            self.numReceived = self.params.num_received_files;\n        });\n\n        $(document).on('click', '.button-upload', function (e) {\n            e.preventDefault();\n            $('#input-file-' + $(this).data('file')).click();\n        });\n\n    }\n}));"],"sourceRoot":"/source/"}