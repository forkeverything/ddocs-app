{"version":3,"sources":["ajax.js","autosize.js","helpers.js","vue/components/date-range-field.js","vue/components/fetches-from-eloquent-repository.js","vue/components/integer-range-field.js","vue/components/paginator.js","vue/components/per-page-picker.js","vue/directives/datepicker.js","vue/directives/modal.js","vue/filters/dates/date-diff-human.js","vue/filters/dates/date-proper.js","vue/filters/dates/date-time.js","vue/filters/dates/date.js","vue/filters/dates/easy-date.js"],"names":[],"mappingsdlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dependencies.js","sourcesContent":["$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n        'Authorization': 'Bearer ' + localStorage.getItem('token')\n    }\n});","$(document).ready(function () {\n    autosize($('.autosize'));\n});","\n/**\n * Takes string and capitalizes the first letter\n * of each word.\n */\nfunction strCapitalize(str) {\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n}\n\n/**\n * Escapes html entities for a string to be inserted\n * into the DOM.\n *\n * @type {{&: string, <: string, >: string, \": string, ': string, /: string}}\n */\nvar entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n};\n\n/**\n * Escapes a given string that has HTML elements.\n *\n * @param string\n * @returns {string}\n */\nfunction escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n        return entityMap[s];\n    });\n}\n\n/**\n * Takes an AJAX response and vue instance\n * and emits form errors to be caught by\n * 'form-errors' Vue Component.\n * \n * @param response\n * @param vue\n */\nfunction vueValidation(response, vue) {\n    if(response.status === 422) {\n        vue.$broadcast('new-errors', response.responseJSON);\n    }\n}\n\n/**\n * Broadcasts clear errors event.\n *\n * @param vue\n */\nfunction vueClearValidationErrors(vue) {\n    vue.$broadcast('clear-errors');\n}\n\n/**\n * Takes an string and tells you if it's a valid email!\n *\n * @returns {boolean}\n * @param string\n */\nfunction validateEmail(string) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(string);\n}\n\n/**\n * Returns whether given string is all\n * alphanumeric (no symbols).\n *\n * @returns {boolean}\n * @param string\n */\nfunction alphaNumeric(string) {\n    var re = /^[A-Za-z\\d\\s]+$/;\n    return re.test(string);\n}\n\n/**\n * Retrieves the Query String Value by\n * Name\n * \n * @param name\n * @param url\n * @returns {*}\n */\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\", \"i\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n/**\n * Takes a 2 Strings (name, value) pair or an Object containing\n * several name-value pairs and updates the current query\n * and returns it.\n * \n * @returns {string}\n */\nfunction updateQueryString() {\n    // Get and prep existing query so we can make changes to it\n    var fullQuery = window.location.href.split('?')[1];         // into pairs\n    var queryArray = fullQuery ? fullQuery.split('&') : [];     // into key-values\n    var queryObj = {};                                          // empty object\n\n    // Build up object\n    queryArray.forEach(function (item) {\n        var x = item.split('=');\n        queryObj[x[0]] = x[1];\n    });\n\n    /**\n     * Make Updates to query\n     * TO DO ::: CHECK HERE\n     */\n    if (typeof arguments[0] === 'string' && arguments.length > 1) {\n        // Only update single query name - set the new name and value\n        queryObj[arguments[0]] = URIEncoder(arguments[1]);\n    } else if(typeof arguments[0] === 'object'){\n        // Received an object with key-value pairs of query names and value to update\n        _.forEach(arguments[0], function (value, key) {\n            if(value) {\n                queryObj[key] = URIEncoder(value);\n            } else {\n                delete queryObj[key];\n            }\n        });\n    } else {\n        // only received a key - delete from query\n        delete queryObj[arguments[0]];\n    }\n\n    // Make new query to return\n    var newQuery = '';\n    // Go through object and add everything back as a string\n    _.forEach(queryObj, function (value, name) {\n        newQuery += name + '=' + value + '&';\n    });\n    // Finally - return our new string!\n    return newQuery.substring(0, newQuery.length - 1);  // Trim last '&'\n}\n\n/**\n * Wrapper function for encodeURI that also accepts\n * an array and encodes each part before joining\n * them together with a '+'\n *\n * @param value\n * @returns {*}\n * @constructor\n */\nfunction URIEncoder(value) {\n    if(value.constructor === Array)  {\n        value = _.map(value, function (i) { if(i && i.replace(/\\s/g, \"\").length > 0) return encodeURI(i); }).join('+');\n    } else {\n        value = encodeURI(value)\n    }\n    return value;\n}\n\n/**\n * When browser has pop-state (ie back / forward)\n * run this function to re-retrieve the data\n *\n * @param callback\n */\nfunction onPopCallFunction(callback)\n{\n    window.onpopstate = function (e) {\n        if (e.state) {\n            callback();\n        }\n    }\n}\n\n/**\n * Takes a query string and if it is  different to\n * the current query string, it will update the\n * browsers state, so we can use nav buttons\n * \n * @param query\n */\nfunction pushStateIfDiffQuery(query) {\n    if (query && query !== window.location.href.split('?')[1]) {\n        window.history.pushState({}, \"\", '?' + query);\n    }\n}\n\n/**\n * Formats a number into comma-separated thousands\n * @param val\n * @returns {*}\n */\nfunction formatNumber(val) {\n    if(isNaN(parseFloat(val))) return val;\n    //Seperates the components of the number\n    var n = val.toString().split(\".\");\n    //Comma-fies the first part\n    n[0] = n[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    //Combines the two sections\n    return n.join(\".\");\n}\n\n/**\n * Checks if a given value is a numeric (ie. a number)\n * @param n\n * @returns {boolean}\n */\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}","Vue.component('date-range-field', {\n    name: 'dateRangeField',\n    template: '<div class=\"date-range-field\" @click.stop=\"\">' +\n    '<div class=\"starting\">' +\n    '<label>starting</label>'+\n    '<input type=\"text\" class=\"filter-datepicker\" v-model=\"min | properDateModel\" placeholder=\"date\" v-datepicker>'+\n    '</div>' +\n    '<span class=\"dash\">-</span>' +\n    '<div class=\"ending\">' +\n    '<label>Ending</label>' +\n    '<input type=\"text\" class=\"filter-datepicker\" v-model=\"max | properDateModel\" placeholder=\"date\" v-datepicker>' +\n    '</div>'+\n    '</div>',\n    props: ['min', 'max']\n});","var fetchesFromEloquentRepository = Vue.extend({\n    name: 'FetchesDataFromEloquentRepository',\n    data: function() {\n        return {\n            ajaxReady: true,\n            request: {},\n            response: {},\n            params: {},\n            showFiltersDropdown: false,\n            filter: '',\n            filterValue: '',\n            minFilterValue: '',\n            maxFilterValue: ''\n        };\n   },\n    methods: {\n        checkSetup: function() {\n            if(!this.requestUrl) throw new Error(\"No Request URL set as 'requestUrl' \");\n            if(this.hasFilter && _.isEmpty(this.filterOptions)) throw new Error(\"Need filterOptions[] defined to use filters\");\n        },\n        fetchResults: function(query) {\n            var self = this,\n                url = this.requestUrl;\n\n            // If we got a new query parameter, use it in our request - otherwise, try get query form address bar\n            query = query || window.location.href.split('?')[1];\n            // If we had a query (arg or parsed) - attach it to our url\n            if (query) url = url + '?' + query;\n\n            // self.finishLoading = false;\n\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            self.request = $.ajax({\n                url: url,\n                method: 'GET',\n                success: function (response) {\n                    // Update data\n                    self.response = response;\n\n                    // Attach filters\n                    // Reset obj\n                    self.params = {};\n                    // Loop through and attach everything (Only pre-defined keys in data obj above will be accessible with Vue)\n                    _.forEach(response.data.query_parameters, function (value, key) {\n                        self.params[key] = value;\n                    });\n\n\n                    // push state (if query is different from url)\n                    pushStateIfDiffQuery(query);\n\n                    document.getElementsByTagName('body')[0].scrollTop = 0;\n\n                    self.ajaxReady = true;\n                },\n                error: function (res, status, req) {\n                    console.log(status);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        changeSort: function (sort) {\n            if (this.params.sort === sort) {\n                var order = (this.params.order === 'asc') ? 'desc' : 'asc';\n                this.fetchResults(updateQueryString({\n                    order: order,\n                    page: 1\n                }));\n            } else {\n                this.fetchResults(updateQueryString({\n                    sort: sort,\n                    order: 'asc',\n                    page: 1\n                }));\n            }\n        },\n        searchTerm: _.debounce(function () {\n            if (this.request && this.request.readyState != 4) this.request.abort();\n            var term = this.params.search || null;\n            this.fetchResults(updateQueryString({\n                search: term,\n                page: 1\n            }))\n        }, 200),\n        clearSearch: function () {\n            this.params.search = '';\n            this.searchTerm();\n        },\n        resetFilterInput: function() {\n            this.filter = '';\n            this.filterValue = '';\n            this.minFilterValue = '';\n            this.maxFilterValue = '';\n        },\n        addFilter: function () {\n            var queryObj = {\n                page: 1\n            };\n            queryObj[this.filter] = this.filterValue || [this.minFilterValue, this.maxFilterValue];\n            this.fetchResults(updateQueryString(queryObj));\n            this.resetFilterInput();\n            this.showFiltersDropdown = false;\n        },\n        removeFilter: function(filter) {\n            var queryObj = {\n                page: 1\n            };\n            queryObj[filter] = null;\n            this.fetchResults(updateQueryString(queryObj));\n        },\n        removeAllFilters: function() {\n            var self = this;\n            var queryObj = {};\n            _.forEach(self.filterOptions, function (option) {\n                queryObj[option.value] = null;\n            });\n            this.fetchResults(updateQueryString(queryObj));\n        }\n    },\n    ready: function() {\n        this.checkSetup();\n        this.fetchResults();\n        onPopCallFunction(this.fetchResults);\n    }\n});","Vue.component('integer-range-field', {\n    name: 'integerRangeField',\n    template: '<div class=\"integer-range-field\">'+\n    '<input type=\"number\" class=\"form-control\" v-model=\"min\" min=\"0\">'+\n    '<span class=\"dash\">-</span>'+\n    '<input type=\"number\" class=\"form-control\" v-model=\"max\" min=\"0\">'+\n    '</div>',\n    props: ['min', 'max']\n});","Vue.component('paginator', {\n    name: 'paginator',\n    template: '<nav aria-label=\"Page navigation\">' +\n    '<ul class=\"pagination\">' +\n    '   <li class=\"paginate-nav to-first\"' +\n    '       :class=\"{' +\n    \"           'disabled': currentPage < 3  || currentPage > lastPage\" +\n    '       }\"' +\n    '       @click=\"goToPage(1)\"' +\n    '   >'+\n    '       <a href=\"#\" aria-label=\"First page\"><i class=\"fa fa-angle-double-left\"></i></a>' +\n    '   </li>'+\n    '   <li class=\"paginate-nav prev\"' +\n    '       :class=\"{'+\n    \"           'disabled': (currentPage - 1) < 1 || currentPage > lastPage\" +\n    '       }\"'+\n    '       @click=\"goToPage(currentPage - 1)\"'+\n    '   >'+\n    '       <a href=\"#\" aria-label=\"Previous\"><i class=\"fa fa-angle-left\"></i></a>'+\n    '   </li>'+\n    '   <li class=\"paginate-link\"'+\n    '       v-for=\"page in paginatedPages\"'+\n    '       :class=\"{' +\n                \"'active': currentPage === page,\"+\n                \"'disabled': page > lastPage\"+\n    '       }\"'+\n    '       @click=\"goToPage(page)\"'+\n    '   >'+\n    '       <a href=\"#\" aria-label=\"Go to single page\">{{ page }}</a>'+\n    '   </li>'+\n    '   <li class=\"paginate-nav next\"'+\n    '       :class=\"{'+\n                \"'disabled': currentPage >= lastPage\"+\n    '       }\"'+\n    '       @click=\"goToPage(currentPage + 1)\"'+\n    '    >'+\n    '       <a href=\"#\" aria-label=\"Next\"><i class=\"fa fa-angle-right\"></i></a>'+\n    '   </li>'+\n    '   <li class=\"paginate-nav to-last\"'+\n    '       :class=\"{'+\n    \"           'disabled': currentPage > (lastPage - 2)\"+\n    '       }\"'+\n    '       @click=\"goToPage(lastPage)\"'+\n    '   >'+\n    '       <a href=\"#\" aria-label=\"Last page\"><i class=\"fa fa-angle-double-right\"></i></a>'+\n    '   </li>'+\n    '</ul>'+\n    '</nav>',\n    data: function() {\n        return {\n\n        };\n    },\n    props: ['response', 'reqFunction', 'event-name'],\n    computed: {\n        currentPage: function() {\n            return this.response.current_page;\n        },\n        lastPage: function() {\n            return this.response.last_page\n        },\n        paginatedPages: function () {\n            var startPage;\n            var endPage;\n            switch (this.currentPage) {\n                case 1:\n                case 2:\n                    // First 2 pages - always return first 5 pages\n                    return this.makePagesArray(1, 5);\n                    break;\n                case this.lastPage:\n                case this.lastPage - 1:\n                    // Last 2 pages - return last 5 pages\n                        // If we have more than 5 pages count back 4 pages. Else start at page 1\n                        startPage = (this.lastPage > 5) ? this.lastPage - 4 : 1;\n                        endPage = (this.lastPage > 5 ) ? this.lastPage : 5;\n                    return this.makePagesArray(startPage, endPage);\n                    break;\n                default:\n                    startPage = this.currentPage - 2;\n                    endPage = this.currentPage + 2;\n                    return this.makePagesArray(startPage, endPage);\n            }\n        }\n    },\n    methods: {\n        makePagesArray: function (startPage, endPage) {\n            var pagesArray = [];\n            for (var i = startPage; i <= endPage; i++) {\n                pagesArray.push(i);\n            }\n            return pagesArray;\n        },\n        goToPage: function (page) {\n            // if we get a custom event name - fire it\n            if(this.eventName) vueEventBus.$emit(this.eventName, page);\n            vueEventBus.$emit('go-to-page', page);\n            this.$dispatch('go-to-page', page);         // TODO ::: REMOVE WILL BE DEPRACATED Vue 2.0 <\n            if (0 < page && page <= this.lastPage && typeof(this.reqFunction) == 'function') this.reqFunction(updateQueryString('page', page));\n        }\n    },\n    events: {\n\n    },\n    ready: function() {\n\n    }\n});","Vue.component('per-page-picker', {\n    name: 'itemsPerPagePicker',\n    template: '<div class=\"per-page-picker\">' +\n    // '<select-picker :name.sync=\"newItemsPerPage\" :options.sync=\"itemsPerPageOptions\" :function=\"changeItemsPerPage\"></select-picker>' +\n    '<select class=\"form-control\" @change=\"changeItemsPerPage\" v-model=\"newItemsPerPage\">' +\n    '<option v-for=\"option in itemsPerPageOptions\">{{ option }}</option>' +\n    '</select>' +\n    '<span>per page</span>' +\n    '</div>',\n    el: function () {\n        return ''\n    },\n    data: function () {\n        return {\n            newItemsPerPage: '',\n            itemsPerPageOptions: [\n                20, 50, 100\n            ]\n        };\n    },\n    props: ['response', 'reqFunction'],\n    computed: {\n        currentItemsPerPage: function () {\n            return this.response.per_page;\n        }\n    },\n    methods: {\n        changeItemsPerPage: function () {\n            var self = this;\n            if (self.newItemsPerPage !== self.currentItemsPerPage) {\n                self.reqFunction(updateQueryString({\n                    page: 1, // Reset to page 1\n                    per_page: self.newItemsPerPage // Update items per page\n                }));\n            }\n        }\n    },\n    ready: function () {\n        this.$watch('currentItemsPerPage', function (numItems) {\n            this.newItemsPerPage = numItems;\n        });\n    }\n});","Vue.directive('datepicker', {\n    params: ['button-only'],\n    bind: function() {\n        if(this.params.buttonOnly) {\n            $(this.el).datepicker({\n                dateFormat: \"dd/mm/yy\",\n                minDate: 0,\n                buttonImage: '/images/icons/calendar.png',\n                buttonImageOnly: true,\n                showOn: 'both'\n            });\n        } else {\n            $(this.el).datepicker({\n                dateFormat: \"dd/mm/yy\",\n                minDate: 0\n            });\n        }\n    }\n});","Vue.directive('modal', {\n    twoWay: true,\n    update: function () {\n        var self = this;\n        \n        $(this.el).click(function () {\n            self.set(false);\n        });\n\n        $(this.el).children().click(function (e) {\n            e.stopPropagation();\n        });\n    }\n});","Vue.filter('diffHuman', function (value) {\n    if(! value || value == '') return;\n    if (value !== '0000-00-00 00:00:00') {\n        return moment(value, \"YYYY-MM-DD HH:mm:ss\").fromNow();\n    }\n    return value;\n});","Vue.filter('properDateModel', {\n    // model -> view\n    // formats the value when updating the input element.\n    read: function (value) {\n        if (value.replace(/\\s/g, \"\").length > 0) {\n            return moment(value, \"YYYY-MM-DD\").format('DD/MM/YYYY');\n        }\n        return value;\n    },\n    // view -> model\n    // formats the value when writing to the data.\n    write: function (val, oldVal) {\n        if(val.replace(/\\s/g, \"\").length > 0) {\n            return moment(val, \"DD/MM/YYYY\").format(\"YYYY-MM-DD\");\n        }\n        return val;\n    }\n});","Vue.filter('dateTime', function (value) {\n    if(! value || value == '') return;\n    if (value !== '0000-00-00 00:00:00') {\n        return moment(value, \"YYYY-MM-DD HH:mm:ss\").format('DD MMM YYYY, h:mm a');\n    }\n    return value;\n});\n","Vue.filter('date', function (value) {\n    if (value !== '0000-00-00 00:00:00') {\n        return moment(value, \"YYYY-MM-DD HH:mm:ss\").format('DD/MM/YYYY');\n    }\n    return value;\n});","Vue.filter('easyDate', function (value) {\n    if(!value) return;\n    if (value !== '0000-00-00 00:00:00') {\n        return moment(value, \"YYYY-MM-DD HH:mm:ss\").format('DD MMM YYYY');\n    }\n    return value;\n});\n\nVue.filter('easyDateModel', {\n    // model -> view\n    // formats the value when updating the input element.\n    read: function (value) {\n        console.log(value);\n        var date = moment(value, \"DD-MM-YYYY\");\n        if (value && date) {\n            return moment(value, \"DD-MM-YYYY\").format('DD MMM YYYY');\n        }\n        return value;\n    },\n    // view -> model\n    // formats the value when writing to the data.\n    write: function (val, oldVal) {\n        return val;\n    }\n});"],"sourceRoot":"/source/"}